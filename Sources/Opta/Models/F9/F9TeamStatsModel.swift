//
//  Created by Eugen Filipkov on 2/13/18.
//  Copyright Â© 2018 NetcoSports. All rights reserved.
//

import Fuzi

// swiftlint:disable:next type_body_length
public struct F9TeamStatModel: XMLFuziModel {
  /*
   This enum represents F9 feed appendices
   Specification:
   http://www.optasports.com/en/praxis/documentation/football-feed-appendices/f9-appendices.aspx
   */
  // swiftlint:disable:next type_body_length
  public enum Kind: String {
    case undefined
    case accurateBackZonePass = "accurate_back_zone_pass"
    case accurateCornersIntobox = "accurate_corners_intobox"
    case accurateCross = "accurate_cross"
    case accurateCrossNocorner = "accurate_cross_nocorner"
    case accurateForwardZonePass = "accurate_fwd_zone_pass"
    case accurateGoalKicks = "accurate_goal_kicks"
    case accurateKeeperThrows = "accurate_keeper_throws"
    case accurateLaunches = "accurate_launches"
    case accurateLayoffs = "accurate_layoffs"
    case accurateLongBalls = "accurate_long_balls"
    case accuratePass = "accurate_pass"
    case accurateThroughBall = "accurate_through_ball"
    case accurateThrows = "accurate_throws"
    case aerialLost = "aerial_lost"
    case aerialWon = "aerial_won"
    case attemptBoxCentre = "att_bx_centre"
    case attemptOutsideBoxCentre = "att_obx_centre"
    case attemptCorner = "att_corner"
    case attemptFastbreak = "att_fastbreak"
    case attemptFreekickGoal = "att_freekick_goal"
    case attemptFreekickTarget = "att_freekick_target"
    case attemptFreekickTotal = "att_freekick_total"
    case attemptGoalTopCentre = "att_goal_high_centre"
    case attemptGoalTopLeft = "att_goal_high_left"
    case attemptGoalTopRight = "att_goal_high_right"
    case attemptGoalBottomCentre = "att_goal_low_centre"
    case attemptGoalBottomLeft = "att_goal_low_left"
    case attemptGoalBottomRight = "att_goal_low_right"
    case attemptHeadedGoal = "att_hd_goal"
    case attemptHeadedMiss = "att_hd_miss"
    case attemptHeadedPost = "att_hd_post"
    case attemptHeadedTarget = "att_hd_target"
    case attemptHeadedTotal = "att_hd_total"
    case attemptInsideBoxBlocked = "att_ibox_blocked"
    case attemptInsideBoxGoal = "att_ibox_goal"
    case attemptInsideBoxMiss = "att_ibox_miss"
    case attemptInsideBoxPost = "att_ibox_post"
    case attemptInsideBoxTarget = "att_ibox_target"
    case attemptInsideBoxOwnGoal = "att_ibox_own_goal"
    case attemptOutsideBoxOwnGoal = "att_obox_own_goal"
    case attemptLeftFootedGoal = "att_lf_goal"
    case attemptLeftFootedTarget = "att_lf_target"
    case attemptLeftFootedTotal = "att_lf_total"
    case attemptMissTop = "att_miss_high"
    case attemptMissTopLeft = "att_miss_high_left"
    case attemptMissTopRight = "att_miss_high_right"
    case attemptMissLeft = "att_miss_left"
    case attemptMissRight = "att_miss_right"
    case attemptOutsideBoxBlocked = "att_obox_blocked"
    case attemptOutsideBoxGoal = "att_obox_goal"
    case attemptOutsideBoxMiss = "att_obox_miss"
    case attemptOutsideBoxPost = "att_obox_post"
    case attemptOutsideBoxTarget = "att_obox_target"
    case attemptOtherBodyPartGoal = "att_obp_goal"
    case attemptOneOnOne = "att_one_on_one"
    case attemptOpenplay = "att_openplay"
    case attemptPenaltyGoal = "att_pen_goal"
    case attemptPenaltyMiss = "att_pen_miss"
    case attemptPenaltyPost = "att_pen_post"
    case attemptPenaltyTarget = "att_pen_target"
    case attemptPostHigh = "att_post_high"
    case attemptPostLeft = "att_post_left"
    case attemptPostRight = "att_post_right"
    case attemptRightFootedGoal = "att_rf_goal"
    case attemptRightFootedTarget = "att_rf_target"
    case attemptRightFootedTotal = "att_rf_total"
    case attemptSetpiece = "att_setpiece"
    case attemptSavedShotTopCentre = "att_sv_high_centre"
    case attemptSavedShotTopLeft = "att_sv_high_left"
    case attemptSavedShotTopRight = "att_sv_high_right"
    case attemptSavedShotBottomCentre = "att_sv_low_centre"
    case attemptSavedShotBottomLeft = "att_sv_low_left"
    case attemptSavedShotBottomRight = "att_sv_low_right"
    case attemptsConcededInsideBox = "attempts_conceded_ibox"
    case attemptsConcededOutsideBox = "attempts_conceded_obox"
    case backPass = "back_pass"
    case ballRecovery = "ball_recovery"
    case blockedScoringAttempt = "blocked_scoring_att"
    case challengeLost = "challenge_lost"
    case cleanSheet = "clean_sheet"
    case clearanceOffLine = "clearance_off_line"
    case contentiousDecision = "contentious_decision"
    case cornerTaken = "corner_taken"
    case crossNotClaimed = "cross_not_claimed"
    case crosses18Yard = "crosses_18yard"
    case crosses18YardPlus = "crosses_18yardplus"
    case dangerousPlay = "dangerous_play"
    case defenderGoals = "defender_goals"
    case dispossessed = "dispossessed"
    case diveCatch = "dive_catch"
    case diveSave = "dive_save"
    case duelLost = "duel_lost"
    case duelWon = "duel_won"
    case effectiveClearance = "effective_clearance"
    case effectiveHeadClearance = "effective_head_clearance"
    case errorLeadToGoal = "error_lead_to_goal"
    case errorLeadToShot = "error_lead_to_shot"
    case finalThirdEntries = "final_third_entries"
    case freeKicksFoulWon = "fk_foul_won"
    case freeKicksFoulLost = "fk_foul_lost"
    case forwardGoals = "forward_goals"
    case fouls = "fouls"
    case fouledFinalThird = "fouled_final_third"
    case gameStarted = "game_started"
    case goalkeeperSmother = "gk_smother"
    case goalAssist = "goal_assist"
    case goalAssistIntentional = "goal_assist_intentional"
    case goalKicks = "goal_kicks"
    case goals = "goals"
    case goalsConceded = "goals_conceded"
    case goalsConcededInsideBox = "goals_conceded_ibox"
    case goalsConcededOutsideBox = "goals_conceded_obox"
    case goodTopClaim = "good_high_claim"
    case goalsOpenplay = "goals_openplay"
    case handBall = "hand_ball"
    case headClearance = "head_clearance"
    case headPass = "head_pass"
    case interception = "interception"
    case interceptionsInBox = "interceptions_in_box"
    case goalkeeperPickUp = "keeper_pick_up"
    case goalkeeperThrows = "keeper_throws"
    case lastManContest = "last_man_contest"
    case lastmanTackle = "last_man_tackle"
    case longPassOwnToOpposition = "long_pass_own_to_opp"
    case longPassOwnToOppositionSuccess = "long_pass_own_to_opp_success"
    case lostCorners = "lost_corners"
    case minutesPlayed = "mins_played"
    case midfielderGoals = "midfielder_goals"
    case offsideProvoked = "offside_provoked"
    case offtargetAnotherPlayerAssist = "offtarget_att_assist"
    case ontargetAnotherPlayerAssist = "ontarget_att_assist"
    case ontargetScoringAnotherPlayer = "ontarget_scoring_att"
    case defenderShotBlock = "outfielder_block"
    case ownGoals = "own_goals"
    case passesLeft = "passes_left"
    case passesRight = "passes_right"
    case penaltyGoalsConceded = "pen_goals_conceded"
    case penaltyConceded = "penalty_conceded"
    case penaltySave = "penalty_save"
    case penaltyWon = "penalty_won"
    case possessionPercentage = "possession_percentage"
    case postScoringAttempt = "post_scoring_att"
    case punches = "punches"
    case redCard = "red_card"
    case savedInsideBox = "saved_ibox"
    case savedOutsideBox = "saved_obox"
    case savedDirectFreeKick = "saved_setpiece"
    case saves = "saves"
    case secondYellow = "second_yellow"
    case secondGoalAssist = "second_goal_assist"
    case shotOffTarget = "shot_off_target"
    case sixSecondViolation = "six_second_violation"
    case sixYardBlock = "six_yard_block"
    case goalkeeperStandingCatch = "stand_catch"
    case goalkeeperStandingSave = "stand_save"
    case substitutions = "subs_made"
    case totalAttemptAssist = "total_att_assist"
    case totalBackZonePass = "total_back_zone_pass"
    case totalClearance = "total_clearance"
    case totalContest = "total_contest"
    case totalCornersInToBox = "total_corners_intobox"
    case totalCross = "total_cross"
    case totalCrossNoCorner = "total_cross_nocorner"
    case totalFastbreak = "total_fastbreak"
    case totalForwardZonePass = "total_fwd_zone_pass"
    case totalHighClaim = "total_high_claim"
    case totalLaunches = "total_launches"
    case totalLayoffs = "total_layoffs"
    case totalLongBalls = "total_long_balls"
    case totalOffside = "total_offside"
    case totalPass = "total_pass"
    case totalScoringAttempt = "total_scoring_att"
    case totalSubstitutedOff = "total_sub_off"
    case totalSubstitutedOn = "total_sub_on"
    case totalTackle = "total_tackle"
    case totalThroughBall = "total_through_ball"
    case totalThrows = "total_throws"
    case totalYellowCard = "total_yel_card"
    case totalRedCard = "total_red_card"
    case touches = "touches"
    case turnover = "turnover"
    case playerFoulsCount = "was_fouled"
    case totalDribbles = "won_contest"
    case totalCornersForcedByTeam = "won_corners"
    case totalWonTackle = "won_tackle"
    case yellowCard = "yellow_card"
    case totalFlickedOn = "total_flick_on"
    case accurateFlickedOn = "accurate_flick_on"
    case totalChippedPass = "total_chipped_pass"
    case accurateChippedPass = "accurate_chipped_pass"
    case blockedCross = "blocked_cross"
    case shieldBallOpponent = "shield_ball_oop"
    case foulThrowIn = "foul_throw_in"
    case effectiveBlockedCross = "effective_blocked_cross"
    case penaltyFaced = "penalty_faced"
    case totalPullBack = "total_pull_back"
    case accuratePullBack = "accurate_pull_back"
    case totalGoalkeeperSweeper = "total_keeper_sweeper"
    case accurateGoalkeeperSweeper = "accurate_keeper_sweeper"
    case goalAssistOpenplay = "goal_assist_openplay"
    case goalAssistSetplay = "goal_assist_setplay"
    case attemptAssistOpenplay = "att_assist_openplay"
    case attemptAssistSetplay = "att_assist_setplay"
    case overrun = "overrun"
    case interceptionWon = "interception_won"
    case bigChanceCreated = "big_chance_created"
    case bigChanceMissed = "big_chance_missed"
    case bigChanceScored = "big_chance_scored"
    case unsuccessfulTouch = "unsuccessful_touch"
    case forwardPass = "fwd_pass"
    case backwardPass = "backward_pass"
    case leftsidePass = "leftside_pass"
    case rightsidePass = "rightside_pass"
    case successfulFinalThirdPasses = "successful_final_third_passes"
    case totalFinalThirdPasses = "total_final_third_passes"
    case rescindedRedCard = "rescinded_red_card"
    case divingSave = "diving_save"
    case possWonDefensive3rd = "poss_won_def_3rd"
    case possessionWonMidfield3rd = "poss_won_mid_3rd"
    case possessionWonAttempt3rd = "poss_won_att_3rd"
    case possessionLostAll = "poss_lost_all"
    case possessionLostClearances = "poss_lost_ctrl"
    case goalFastbreak = "goal_fastbreak"
    case shotFastbreak = "shot_fastbreak"
    case penaltyAreaEntries = "pen_area_entries"
    case finalThirdEntry = "final_third_entry"
    case hitWoodwork = "hit_woodwork"
    case goalAssistDeadball = "goal_assist_deadball"
    case freekickCross = "freekick_cross"
    case accurateFreekickCross = "accurate_freekick_cross"
    case openPlayPass = "open_play_pass"
    case successfulOpenPlayPass = "successful_open_play_pass"
    case attemptedTackleFoul = "attempted_tackle_foul"
    case fiftyFifty = "fifty_fifty"
    case successfulFiftyFifty = "successful_fifty_fifty"
    case blockedPass = "blocked_pass"
    case failedToBlock = "failed_to_block"
    case putThrough = "put_through"
    case successfulPutThrough = "successful_put_through"
    case assistPassLost = "assist_pass_lost"
    case assistBlockedShot = "assist_blocked_shot"
    case assistAttemptSaved = "assist_attempt_saved"
    case assistPost = "assist_post"
    case assistFreeKickWon = "assist_free_kick_won"
    case assistHandballWon = "assist_handball_won"
    case assistOwnGoal = "assist_own_goal"
    case assistPenaltyWon = "assist_penalty_won"
    case shotsConcededOnField = "shots_conc_onfield"
    case goalsConcededOnField = "goals_conc_onfield"
    case pointsDroppedWinningPositions = "pts_dropped_winning_pos"
    case pointsGainedLosingPositions = "pts_gained_losing_pos"
    case touchesInOppositionBox = "touches_in_opp_box"
    /////
    // miss in specifications
    ////
    case attemptCmissLeft = "att_cmiss_left"
    case attemptCmissRight = "att_cmiss_right"
    case attemptCmissTop = "att_cmiss_high"
    case attemptCmissBottom = "att_cmiss_low"
    case attemptsOutsideBox = "attempts_obox"
    case attemptsInsideBox = "attempts_ibox"
    case attemptBoxLeft = "att_bx_left"
    case attemptBoxRight = "att_bx_right"
    case attemptFreekickMiss = "att_freekick_miss"
    case attemptLgCentre = "att_lg_centre"
  }

  public let kind: Kind
  public let totalValue: Int
  public let firstHalfValue: Int
  public let secondHalfValue: Int
  public private(set) var firstHalfExtraTimeValue: Int?
  public private(set) var secondHalfExtraTimeValue: Int?

  public init(_ xml: XMLElement) throws {
    let attributes = xml.attributes
    kind = Kind(rawValue: attributes["Type"] ?? "") ?? .undefined
    totalValue = Int(xml.stringValue) ?? 0
    firstHalfValue = Int(attributes["FH"] ?? "") ?? 0
    secondHalfValue = Int(attributes["SH"] ?? "") ?? 0
    if let value = attributes["EFH"] {
      firstHalfExtraTimeValue = Int(value)
    }
    if let value = attributes["ESH"] {
      secondHalfExtraTimeValue = Int(value)
    }
  }
}
